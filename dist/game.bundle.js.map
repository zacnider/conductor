{"version":3,"file":"game.bundle.js","mappings":"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","sources":["webpack://chaos-conductor/./src/game.js"],"sourcesContent":["// Chaos Conductor - Multisynq ile Real-time Multiplayer Game\n\n// Multisynq Configuration\nconst MULTISYNQ_API_KEY = '2dNJ78OxelBvHA8vNqKR3r8Sf1W2RKELUYsuZo0whf';\nconst MULTISYNQ_USER_ID = '6876a905e273b89ce27dd663';\nconst APP_ID = 'com.chaosconductor.game';\n\n// Sabitler\nconst TASK_DURATION = 15000;\nconst ROUND_COUNT = 10;\nconst MIN_PLAYERS = 2;\nconst MAX_PLAYERS = 8;\n\n// Görev tipleri\nconst TASK_TYPES = {\n    CLICK: 'click',\n    TYPE: 'type',\n    DRAW: 'draw',\n    FAKE: 'fake'\n};\n\n// Oyun durumu factory\nfunction createGameState() {\n    return {\n        players: {},\n        scores: {},\n        currentTask: null,\n        round: 0,\n        gameStarted: false,\n        gameEnded: false,\n        roomId: null\n    };\n}\n\n// Multisynq Model - Oyun durumunu yönetir\nclass ChaosGameModel extends Multisynq.Model {\n    init(props) {\n        super.init(props);\n        this.gameState = createGameState();\n        \n        console.log('ChaosGameModel initialized:', this.sessionId);\n        \n        // Multisynq standard event handlers\n        this.subscribe(this.sessionId, \"view-join\", this.onViewJoin);\n        this.subscribe(this.sessionId, \"view-exit\", this.onViewExit);\n        \n        // Custom message handlers\n        this.subscribe(this.sessionId, \"taskComplete\", this.handleTaskCompleted);\n        this.subscribe(this.sessionId, \"gameStateUpdate\", this.handleGameStateUpdate);\n        this.subscribe(this.sessionId, \"newTask\", this.handleNewTask);\n        this.subscribe(this.sessionId, \"sabotageUse\", this.handleSabotageUsed);\n        this.subscribe(this.sessionId, \"chatMessage\", this.handleChatMessage);\n    }\n\n    onViewJoin(viewId) {\n        console.log(`Player ${viewId} trying to join...`);\n        \n        // Vérifier si le serveur est plein\n        if (Object.keys(this.gameState.players).length >= MAX_PLAYERS) {\n            this.publish(viewId, \"connection-refused\", {\n                reason: \"Server is full\",\n                maxPlayers: MAX_PLAYERS,\n                currentPlayers: Object.keys(this.gameState.players).length\n            });\n            console.log(`Player ${viewId} refused - server full`);\n            return;\n        }\n        \n        console.log(`Player ${viewId} joined the game!`);\n        \n        // S'abonner aux événements du joueur\n        this.subscribe(viewId, \"set-name\", \"handleSetName\");\n        \n        // Créer le joueur\n        this.gameState.players[viewId] = {\n            id: viewId,\n            name: `Player${Object.keys(this.gameState.players).length + 1}`,\n            ready: false,\n            combo: 0\n        };\n        this.gameState.scores[viewId] = 0;\n        \n        const playerCount = Object.keys(this.gameState.players).length;\n        console.log('Player joined:', viewId, 'Total players:', playerCount);\n        \n        // Broadcast player update\n        this.publish(this.sessionId, \"playersUpdate\", {\n            players: this.gameState.players,\n            scores: this.gameState.scores,\n            playerCount: playerCount\n        });\n    }\n\n    onViewExit(viewId) {\n        console.log(`Player ${viewId} left`);\n        \n        if (this.gameState.players[viewId]) {\n            delete this.gameState.players[viewId];\n            delete this.gameState.scores[viewId];\n            \n            const playerCount = Object.keys(this.gameState.players).length;\n            \n            // Broadcast player update\n            this.publish(this.sessionId, \"playersUpdate\", {\n                players: this.gameState.players,\n                scores: this.gameState.scores,\n                playerCount: playerCount\n            });\n            \n            console.log('Player left, remaining players:', playerCount);\n        }\n    }\n\n    handleSetName(data) {\n        const { viewId, name } = data;\n        if (this.gameState.players[viewId]) {\n            this.gameState.players[viewId].name = name.substring(0, 15);\n            \n            // Broadcast player update\n            this.publish(this.sessionId, \"playersUpdate\", {\n                players: this.gameState.players,\n                scores: this.gameState.scores,\n                playerCount: Object.keys(this.gameState.players).length\n            });\n        }\n    }\n\n\n    handleTaskCompleted(data) {\n        const { playerId, taskId, timeLeft, success } = data;\n        \n        if (this.gameState.currentTask && this.gameState.currentTask.id === taskId) {\n            const player = this.gameState.players[playerId];\n            if (player && success) {\n                let points = this.gameState.currentTask.points;\n                \n                // Hız bonusu\n                const speedBonus = Math.floor(timeLeft / 1000) * 10;\n                points += speedBonus;\n                \n                // Combo bonusu\n                player.combo = (player.combo || 0) + 1;\n                if (player.combo >= 3) {\n                    points *= 1.5;\n                    player.combo = 0;\n                    this.publish(\"powerUp\", { playerId, type: \"combo\" });\n                }\n                \n                const currentScore = this.gameState.scores[playerId] || 0;\n                this.gameState.scores[playerId] = currentScore + points;\n                \n                this.publish(\"scoreUpdate\", {\n                    playerId,\n                    points,\n                    speedBonus,\n                    totalScore: currentScore + points\n                });\n            }\n        }\n    }\n\n    handleGameStateUpdate(data) {\n        Object.assign(this.gameState, data);\n        this.publish(\"gameStateChanged\", this.gameState);\n    }\n\n    handleNewTask(data) {\n        this.gameState.currentTask = data.task;\n        this.gameState.round = data.round;\n        this.publish(\"taskUpdate\", data);\n    }\n\n    handleSabotageUsed(data) {\n        this.publish(\"sabotageActivated\", data);\n    }\n\n    handleChatMessage(data) {\n        this.publish(\"chatUpdate\", data);\n    }\n}\n\n// Multisynq View - UI güncellemelerini yönetir\n// Multisynq View - UI güncellemelerini yönetir\nclass ChaosGameView extends Multisynq.View {\n    init(model) {\n        super.init(model);\n        this.model = model; // Model referansını sakla\n        this.gameState = createGameState();\n        this.currentPlayerId = this.viewId;\n        this.playerName = '';\n        this.isFrozen = false;\n        \n        console.log('ChaosGameView initialized:', this.sessionId, this.viewId);\n        \n        // Connection events\n        this.subscribe(this.viewId, \"connection-refused\", (data) => this.onConnectionRefused(data));\n        \n        // Event subscriptions - arrow function ile\n        this.subscribe(this.sessionId, \"playersUpdate\", (data) => this.updatePlayers(data));\n        this.subscribe(this.sessionId, \"gameStateChanged\", (data) => this.updateGameState(data));\n        this.subscribe(this.sessionId, \"taskUpdate\", (data) => this.updateTask(data));\n        this.subscribe(this.sessionId, \"scoreUpdate\", (data) => this.updateScore(data));\n        this.subscribe(this.sessionId, \"powerUp\", (data) => this.showPowerUp(data));\n        this.subscribe(this.sessionId, \"sabotageActivated\", (data) => this.handleSabotage(data));\n        this.subscribe(this.sessionId, \"chatUpdate\", (data) => this.updateChat(data));\n        \n        // Periyodik olarak Model'den veri çek\n        this.startModelSync();\n    }\n\n    startModelSync() {\n        setInterval(() => {\n            if (this.model && this.model.gameState) {\n                // Model'den direkt veri al\n                const modelPlayers = this.model.gameState.players || {};\n                const modelScores = this.model.gameState.scores || {};\n                const playerCount = Object.keys(modelPlayers).length;\n                \n                // Eğer Model'de oyuncu varsa ama View'da yoksa, güncelle\n                if (playerCount > 0 && Object.keys(this.gameState.players || {}).length === 0) {\n                    console.log('Syncing from Model - Players:', playerCount);\n                    this.gameState.players = modelPlayers;\n                    this.gameState.scores = modelScores;\n                    this.renderPlayers();\n                    this.renderScores();\n                }\n            }\n        }, 1000);\n    }\n    onConnectionRefused({ reason, maxPlayers, currentPlayers }) {\n        console.log('Connection refused:', reason);\n        this.showNotification(`Sunucu dolu! (${currentPlayers}/${maxPlayers})`, 'error');\n    }\n\n    updatePlayers(data) {\n        console.log('View updatePlayers called:', data);\n        \n        if (!data || !data.players) {\n            console.warn('updatePlayers called with invalid data:', data);\n            return;\n        }\n        \n        // Ensure gameState exists\n        if (!this.gameState) {\n            this.gameState = createGameState();\n        }\n        \n        this.gameState.players = data.players;\n        this.gameState.scores = data.scores || {};\n        \n        const playerCount = Object.keys(this.gameState.players).length;\n        console.log('Updating UI with player count:', playerCount);\n        \n        this.renderPlayers();\n        this.renderScores();\n    }\n\n    updateGameState(gameState) {\n        Object.assign(this.gameState, gameState);\n        this.renderGameState();\n    }\n\n    updateTask(data) {\n        this.gameState.currentTask = data.task;\n        this.gameState.round = data.round;\n        this.renderTask();\n        this.startTaskTimer();\n    }\n\n    updateScore(data) {\n        if (data.playerId === this.currentPlayerId) {\n            this.showScoreNotification(data.points, data.speedBonus);\n        }\n        this.gameState.scores[data.playerId] = data.totalScore;\n        this.renderScores();\n    }\n\n    showPowerUp(data) {\n        if (data.playerId === this.currentPlayerId) {\n            this.showNotification('🔥 COMBO BONUS! 🔥', 'success');\n        }\n    }\n\n    handleSabotage(data) {\n        if (data.targetId === this.currentPlayerId) {\n            this.freezePlayer(data.duration);\n        }\n        this.showNotification(`${data.playerName} sabotaj kullandı!`, 'warning');\n    }\n\n    updateChat(data) {\n        this.addChatMessage(data);\n    }\n\n    renderPlayers() {\n        const playersList = document.getElementById('players-list');\n        if (!playersList) return;\n\n        if (!this.gameState || !this.gameState.players) {\n            console.warn('gameState or players is undefined');\n            this.gameState = this.gameState || createGameState();\n            this.gameState.players = this.gameState.players || {};\n        }\n\n        playersList.innerHTML = '';\n        const playerCount = Object.keys(this.gameState.players).length;\n        \n        Object.entries(this.gameState.players).forEach(([playerId, player]) => {\n            if (!player) return;\n            \n            const playerCard = document.createElement('div');\n            playerCard.className = 'player-card';\n            if (player.ready) playerCard.classList.add('ready');\n            \n            playerCard.innerHTML = `\n                <div class=\"player-name\">${player.name || 'Unknown'}</div>\n                <div class=\"player-status\">${player.ready ? 'Hazır' : 'Bekliyor'}</div>\n            `;\n            \n            playersList.appendChild(playerCard);\n        });\n\n        // Oyuncu sayısını güncelle\n        const playerCountElement = document.getElementById('player-count');\n        if (playerCountElement) {\n            playerCountElement.textContent = playerCount;\n        }\n        \n        // Oyun başlatma butonunu kontrol et\n        const startGameBtn = document.getElementById('start-game-btn');\n        if (startGameBtn) {\n            if (playerCount >= 2) {\n                startGameBtn.disabled = false;\n                startGameBtn.textContent = 'OYUNU BAŞLAT';\n                startGameBtn.style.opacity = '1';\n            } else {\n                startGameBtn.disabled = true;\n                startGameBtn.textContent = `OYUNU BAŞLAT (${playerCount}/2)`;\n                startGameBtn.style.opacity = '0.5';\n            }\n        }\n        \n        console.log('Players rendered:', playerCount, 'players');\n    }\n\n    renderScores() {\n        const scoresList = document.getElementById('scores-list');\n        if (!scoresList) return;\n\n        const sortedScores = Object.entries(this.gameState.scores)\n            .sort((a, b) => b[1] - a[1]);\n\n        scoresList.innerHTML = '';\n        sortedScores.forEach(([playerId, score], index) => {\n            const player = this.gameState.players[playerId];\n            if (!player) return;\n\n            const scoreItem = document.createElement('div');\n            scoreItem.className = 'score-item';\n            if (playerId === this.currentPlayerId) {\n                scoreItem.classList.add('current-player');\n            }\n\n            scoreItem.innerHTML = `\n                <span>${index + 1}. ${player.name}</span>\n                <span>${score}</span>\n            `;\n\n            scoresList.appendChild(scoreItem);\n        });\n    }\n\n    renderTask() {\n        const taskDescription = document.getElementById('task-description');\n        const currentRound = document.getElementById('current-round');\n\n        if (taskDescription && this.gameState.currentTask) {\n            taskDescription.textContent = this.gameState.currentTask.description;\n            \n            if (this.gameState.currentTask.isFake) {\n                taskDescription.style.color = '#ff6b6b';\n                taskDescription.style.textDecoration = 'line-through';\n            } else {\n                taskDescription.style.color = '';\n                taskDescription.style.textDecoration = '';\n            }\n        }\n\n        if (currentRound) {\n            currentRound.textContent = this.gameState.round;\n        }\n\n        this.renderTaskElements();\n    }\n\n    renderTaskElements() {\n        const gameUI = document.getElementById('game-ui');\n        const canvas = document.getElementById('game-canvas');\n        \n        if (!gameUI || !canvas || !this.gameState.currentTask) return;\n\n        gameUI.innerHTML = '';\n        const task = this.gameState.currentTask;\n        \n        switch (task.type) {\n            case 'click':\n                this.createClickElements(gameUI, canvas, task);\n                break;\n            case 'type':\n                this.createTypeElements(gameUI, task);\n                break;\n            case 'draw':\n                this.createDrawElements(canvas, task);\n                break;\n        }\n    }\n\n    createClickElements(gameUI, canvas, task) {\n        const rect = canvas.getBoundingClientRect();\n        const colors = ['red', 'blue', 'green', 'yellow', 'purple', 'orange'];\n        const shapes = ['circle', 'square', 'triangle'];\n        \n        const targetColor = task.targetColor || colors[Math.floor(Math.random() * colors.length)];\n        const targetShape = task.targetShape || shapes[Math.floor(Math.random() * shapes.length)];\n        \n        const elementCount = 5 + Math.floor(Math.random() * 6);\n        \n        for (let i = 0; i < elementCount; i++) {\n            const element = document.createElement('div');\n            element.className = `game-element shape ${shapes[Math.floor(Math.random() * shapes.length)]}`;\n            \n            const color = i === 0 ? targetColor : colors[Math.floor(Math.random() * colors.length)];\n            const shape = i === 0 ? targetShape : shapes[Math.floor(Math.random() * shapes.length)];\n            \n            element.style.backgroundColor = color;\n            element.style.width = '60px';\n            element.style.height = '60px';\n            element.style.left = Math.random() * (rect.width - 60) + 'px';\n            element.style.top = Math.random() * (rect.height - 60) + 'px';\n            \n            element.addEventListener('click', () => {\n                if (color === targetColor && shape === targetShape && !this.isFrozen) {\n                    this.completeTask(true);\n                } else {\n                    this.completeTask(false);\n                }\n            });\n            \n            gameUI.appendChild(element);\n        }\n    }\n\n    createTypeElements(gameUI, task) {\n        const typeContainer = document.createElement('div');\n        typeContainer.style.position = 'absolute';\n        typeContainer.style.top = '50%';\n        typeContainer.style.left = '50%';\n        typeContainer.style.transform = 'translate(-50%, -50%)';\n        typeContainer.style.textAlign = 'center';\n        \n        const input = document.createElement('input');\n        input.type = 'text';\n        input.placeholder = `\"${task.targetWord}\" yazın...`;\n        input.style.padding = '15px';\n        input.style.fontSize = '1.2rem';\n        input.style.borderRadius = '10px';\n        input.style.border = 'none';\n        input.style.textAlign = 'center';\n        input.style.width = '300px';\n        \n        let typedCount = 0;\n        const targetCount = task.targetCount || 3;\n        \n        input.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter' && !this.isFrozen) {\n                if (input.value.toLowerCase() === task.targetWord.toLowerCase()) {\n                    typedCount++;\n                    input.value = '';\n                    \n                    if (typedCount >= targetCount) {\n                        this.completeTask(true);\n                    } else {\n                        input.placeholder = `\"${task.targetWord}\" yazın... (${typedCount}/${targetCount})`;\n                    }\n                }\n            }\n        });\n        \n        typeContainer.appendChild(input);\n        gameUI.appendChild(typeContainer);\n        \n        setTimeout(() => input.focus(), 100);\n    }\n\n    createDrawElements(canvas, task) {\n        const ctx = canvas.getContext('2d');\n        let isDrawing = false;\n        let hasDrawn = false;\n        \n        ctx.strokeStyle = '#fff';\n        ctx.lineWidth = 3;\n        ctx.lineCap = 'round';\n        \n        const startDrawing = (e) => {\n            if (this.isFrozen) return;\n            isDrawing = true;\n            hasDrawn = true;\n            const rect = canvas.getBoundingClientRect();\n            ctx.beginPath();\n            ctx.moveTo(e.clientX - rect.left, e.clientY - rect.top);\n        };\n        \n        const draw = (e) => {\n            if (!isDrawing || this.isFrozen) return;\n            const rect = canvas.getBoundingClientRect();\n            ctx.lineTo(e.clientX - rect.left, e.clientY - rect.top);\n            ctx.stroke();\n        };\n        \n        const stopDrawing = () => {\n            isDrawing = false;\n            if (hasDrawn) {\n                setTimeout(() => this.completeTask(true), 500);\n            }\n        };\n        \n        canvas.addEventListener('mousedown', startDrawing);\n        canvas.addEventListener('mousemove', draw);\n        canvas.addEventListener('mouseup', stopDrawing);\n        canvas.addEventListener('mouseout', stopDrawing);\n    }\n\n    startTaskTimer() {\n        const timer = document.getElementById('task-timer');\n        const progressBar = document.querySelector('.progress-bar') || this.createProgressBar();\n        \n        if (!timer || !this.gameState.currentTask) return;\n        \n        let timeLeft = this.gameState.currentTask.duration / 1000;\n        const totalTime = timeLeft;\n        \n        const updateTimer = () => {\n            timer.textContent = Math.ceil(timeLeft);\n            \n            const progress = (timeLeft / totalTime) * 100;\n            progressBar.style.width = progress + '%';\n            \n            if (timeLeft <= 0) {\n                this.completeTask(false);\n                return;\n            }\n            \n            timeLeft -= 0.1;\n            setTimeout(updateTimer, 100);\n        };\n        \n        updateTimer();\n    }\n\n    createProgressBar() {\n        const progressContainer = document.getElementById('task-progress');\n        if (!progressContainer) return null;\n        \n        const progressBar = document.createElement('div');\n        progressBar.className = 'progress-bar';\n        progressBar.style.width = '100%';\n        \n        progressContainer.appendChild(progressBar);\n        return progressBar;\n    }\n\n    completeTask(success) {\n        if (!this.gameState.currentTask) return;\n        \n        const timer = document.getElementById('task-timer');\n        const timeLeft = timer ? parseInt(timer.textContent) * 1000 : 0;\n        \n        // Model'e message gönder\n        this.publish(\"taskComplete\", {\n            playerId: this.currentPlayerId,\n            taskId: this.gameState.currentTask.id,\n            timeLeft,\n            success\n        });\n        \n        if (success) {\n            this.showNotification('Görev Tamamlandı! ✅', 'success');\n            this.playSound('task-complete');\n        } else {\n            this.showNotification('Görev Başarısız! ❌', 'error');\n            this.playSound('task-fail');\n        }\n    }\n\n    freezePlayer(duration) {\n        this.isFrozen = true;\n        document.body.classList.add('frozen');\n        \n        const overlay = document.createElement('div');\n        overlay.className = 'sabotage-overlay';\n        document.body.appendChild(overlay);\n        \n        this.showNotification('🧊 DONDURULDUN! 🧊', 'warning');\n        this.playSound('sabotage');\n        \n        setTimeout(() => {\n            this.isFrozen = false;\n            document.body.classList.remove('frozen');\n            overlay.remove();\n        }, duration);\n    }\n\n    showScoreNotification(points, speedBonus) {\n        let message = `+${points} puan!`;\n        if (speedBonus > 0) {\n            message += ` (Hız bonusu: +${speedBonus})`;\n        }\n        this.showNotification(message, 'success');\n    }\n\n    showNotification(message, type = 'info') {\n        const notifications = document.getElementById('notifications');\n        if (!notifications) return;\n        \n        const notification = document.createElement('div');\n        notification.className = `notification ${type}`;\n        notification.textContent = message;\n        \n        notifications.appendChild(notification);\n        \n        setTimeout(() => {\n            notification.remove();\n        }, 3000);\n    }\n\n    addChatMessage(data) {\n        const chatMessages = document.getElementById('chat-messages');\n        if (!chatMessages) {\n            console.warn('Chat messages container not found');\n            return;\n        }\n        \n        console.log('Adding chat message:', data);\n        \n        const message = document.createElement('div');\n        message.className = 'chat-message';\n        message.innerHTML = `\n            <span class=\"sender\">${data.playerName}:</span>\n            ${data.message}\n        `;\n        \n        chatMessages.appendChild(message);\n        chatMessages.scrollTop = chatMessages.scrollHeight;\n        \n        const chatContainer = document.querySelector('.chat-container');\n        if (chatContainer) {\n            chatContainer.style.display = 'flex';\n        }\n    }\n\n    playSound(soundId) {\n        const audio = document.getElementById(soundId + '-sound');\n        if (audio) {\n            audio.currentTime = 0;\n            audio.play().catch(e => console.log('Ses çalınamadı:', e));\n        }\n    }\n}\n\n// Model sınıfını register et\nChaosGameModel.register('ChaosGameModel');\n\n// Ana Oyun Sınıfı\nclass ChaosGame {\n    constructor() {\n        this.session = null;\n        this.view = null;\n        this.model = null;\n        this.currentScreen = 'main-menu';\n        this.playerName = '';\n        this.roomCode = '';\n        \n        this.initializeUI();\n        this.loadLiveGames();\n    }\n\n    initializeUI() {\n        // Ana menü event listeners\n        document.getElementById('join-game-btn').addEventListener('click', () => {\n            this.joinGame();\n        });\n\n        document.getElementById('create-room-btn').addEventListener('click', () => {\n            this.createRoom();\n        });\n\n        document.getElementById('refresh-rooms-btn').addEventListener('click', () => {\n            this.loadLiveGames();\n        });\n\n        // Lobby event listeners\n        document.getElementById('start-game-btn').addEventListener('click', () => {\n            this.startGame();\n        });\n\n        document.getElementById('leave-room-btn').addEventListener('click', () => {\n            this.leaveRoom();\n        });\n\n        // Chat\n        document.getElementById('send-chat-btn').addEventListener('click', () => {\n            this.sendChatMessage();\n        });\n\n        document.getElementById('chat-input').addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n                this.sendChatMessage();\n            }\n        });\n\n        // Oyun sonu\n        document.getElementById('play-again-btn').addEventListener('click', () => {\n            this.playAgain();\n        });\n\n        document.getElementById('main-menu-btn').addEventListener('click', () => {\n            this.goToMainMenu();\n        });\n    }\n\n    async joinGame() {\n        this.playerName = document.getElementById('player-name').value.trim();\n        this.roomCode = document.getElementById('room-code').value.trim();\n\n        if (!this.playerName) {\n            this.showNotification('Lütfen oyuncu adınızı girin!', 'error');\n            return;\n        }\n\n        if (!this.roomCode) {\n            this.roomCode = 'default-room';\n        }\n\n        try {\n            // Multisynq Session oluştur\n            const result = await Multisynq.Session.join({\n                apiKey: MULTISYNQ_API_KEY,\n                appId: APP_ID,\n                name: this.roomCode,\n                model: ChaosGameModel,\n                view: ChaosGameView,\n                password: 'chaos2025'\n            });\n\n            this.session = result;\n            this.model = result.model;\n            this.view = result.view;\n\n            // Oyuncu adını ayarla\n            this.view.playerName = this.playerName;\n            this.view.publish(this.view.viewId, \"set-name\", {\n                viewId: this.view.viewId,\n                name: this.playerName\n            });\n\n            this.switchScreen('lobby');\n            this.updateRoomInfo();\n            \n            // Force initial render after joining\n            setTimeout(() => {\n                this.view.renderPlayers();\n                this.forceUpdatePlayerCount();\n            }, 500);\n            \n            // Periyodik olarak oyuncu sayısını güncelle\n            this.playerCountInterval = setInterval(() => {\n                this.forceUpdatePlayerCount();\n            }, 1000);\n\n        } catch (error) {\n            console.error('Oyuna katılım hatası:', error.message || error);\n            this.showNotification('Oyuna katılırken hata oluştu!', 'error');\n        }\n    }\n\n    async createRoom() {\n        this.roomCode = this.generateRoomCode();\n        document.getElementById('room-code').value = this.roomCode;\n        await this.joinGame();\n    }\n\n    generateRoomCode() {\n        return Math.random().toString(36).substring(2, 8).toUpperCase();\n    }\n\n    startGame() {\n        if (this.view && Object.keys(this.view.gameState.players).length >= 2) {\n            this.view.publish(\"gameStateUpdate\", {\n                gameMode: 'playing',\n                gameActive: true\n            });\n            \n            this.switchScreen('game-screen');\n            this.startGameLoop();\n        }\n    }\n\n    startGameLoop() {\n        setTimeout(() => {\n            this.generateNewTask();\n        }, 2000);\n    }\n\n    generateNewTask() {\n        const taskTypes = [\n            {\n                type: 'click',\n                description: 'Kırmızı daireye tıkla!',\n                duration: 10000,\n                points: 100,\n                targetColor: 'red',\n                targetShape: 'circle'\n            },\n            {\n                type: 'type',\n                description: 'CHAOS yazın 3 kez!',\n                duration: 15000,\n                points: 150,\n                targetWord: 'CHAOS',\n                targetCount: 3\n            },\n            {\n                type: 'draw',\n                description: '5 saniyede bir ev çizin!',\n                duration: 8000,\n                points: 200,\n                targetObject: 'house'\n            },\n            {\n                type: 'click',\n                description: 'Bu görev sahte, görmezden gelin!',\n                duration: 8000,\n                points: 250,\n                isFake: true\n            }\n        ];\n\n        const taskTemplate = taskTypes[Math.floor(Math.random() * taskTypes.length)];\n        const task = {\n            ...taskTemplate,\n            id: Date.now(),\n            round: (this.view.gameState.round || 0) + 1\n        };\n\n        this.view.publish(\"newTask\", {\n            task,\n            round: task.round\n        });\n\n        setTimeout(() => {\n            this.generateNewTask();\n        }, task.duration + 2000);\n    }\n\n    leaveRoom() {\n        if (this.view) {\n            this.view.publish(\"playerLeave\", {\n                playerId: this.view.viewId\n            });\n        }\n        this.switchScreen('main-menu');\n        this.resetGame();\n    }\n\n    sendChatMessage() {\n        const input = document.getElementById('chat-input');\n        const message = input.value.trim();\n        \n        if (message && this.view) {\n            this.view.publish(\"chatMessage\", {\n                playerId: this.view.viewId,\n                playerName: this.playerName,\n                message,\n                timestamp: Date.now()\n            });\n            \n            input.value = '';\n        }\n    }\n\n    playAgain() {\n        this.resetGame();\n        this.switchScreen('lobby');\n    }\n\n    goToMainMenu() {\n        this.leaveRoom();\n    }\n\n    resetGame() {\n        if (this.view) {\n            this.view.gameState = createGameState();\n        }\n    }\n\n    updateRoomInfo() {\n        document.getElementById('room-name').textContent = this.roomCode;\n        document.getElementById('current-room-code').textContent = this.roomCode;\n    }\n\n    switchScreen(screenId) {\n        document.querySelectorAll('.screen').forEach(screen => {\n            screen.classList.remove('active');\n        });\n        \n        document.getElementById(screenId).classList.add('active');\n        this.currentScreen = screenId;\n    }\n\n    showNotification(message, type = 'info') {\n        const notifications = document.getElementById('notifications');\n        if (!notifications) return;\n        \n        const notification = document.createElement('div');\n        notification.className = `notification ${type}`;\n        notification.textContent = message;\n        \n        notifications.appendChild(notification);\n        \n        setTimeout(() => {\n            notification.remove();\n        }, 3000);\n    }\n\n    loadLiveGames() {\n        const liveGamesList = document.getElementById('live-games-list');\n        if (!liveGamesList) return;\n\n        liveGamesList.innerHTML = '<div class=\"loading\">Aktif oyunlar yükleniyor...</div>';\n        \n        // Multisynq'den aktif odaları çek\n        // Bu kısım Multisynq API'sine göre güncellenecek\n    }\n\n    forceUpdatePlayerCount() {\n        if (this.view && this.view.gameState) {\n            if (!this.view.gameState.players) {\n                this.view.gameState.players = {};\n            }\n            \n            const playerCount = Object.keys(this.view.gameState.players).length;\n            const playerCountElement = document.getElementById('player-count');\n            if (playerCountElement) {\n                playerCountElement.textContent = playerCount;\n                console.log('Forced player count update:', playerCount);\n            }\n            \n            const startGameBtn = document.getElementById('start-game-btn');\n            if (startGameBtn) {\n                if (playerCount >= 2) {\n                    startGameBtn.disabled = false;\n                    startGameBtn.textContent = 'OYUNU BAŞLAT';\n                    startGameBtn.style.opacity = '1';\n                } else {\n                    startGameBtn.disabled = true;\n                    startGameBtn.textContent = `OYUNU BAŞLAT (${playerCount}/2)`;\n                    startGameBtn.style.opacity = '0.5';\n                }\n            }\n            \n            this.view.renderPlayers();\n        }\n    }\n}\n\n// Oyunu başlat\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.chaosGame = new ChaosGame();\n    console.log('Chaos Conductor başlatıldı! (Multisynq Mode)');\n});"],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_slicedToArray","Array","isArray","_arrayWithHoles","next","push","_iterableToArrayLimit","_arrayLikeToArray","toString","slice","constructor","name","from","test","_unsupportedIterableToArray","_nonIterableRest","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_typeof","toPrimitive","String","_toPrimitive","_callSuper","_getPrototypeOf","ReferenceError","_assertThisInitialized","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","Boolean","valueOf","_superPropGet","_get","get","hasOwnProperty","_superPropBase","getOwnPropertyDescriptor","_inherits","_setPrototypeOf","ChaosGameModel","Multisynq","Model","props","this","gameState","players","scores","currentTask","round","gameStarted","gameEnded","roomId","console","log","sessionId","subscribe","onViewJoin","onViewExit","handleTaskCompleted","handleGameStateUpdate","handleNewTask","handleSabotageUsed","handleChatMessage","viewId","concat","keys","publish","reason","maxPlayers","currentPlayers","id","ready","combo","playerCount","data","substring","playerId","taskId","timeLeft","success","player","points","speedBonus","Math","floor","type","currentScore","totalScore","assign","task","ChaosGameView","View","model","_this","currentPlayerId","playerName","isFrozen","onConnectionRefused","updatePlayers","updateGameState","updateTask","updateScore","showPowerUp","handleSabotage","updateChat","startModelSync","_this2","setInterval","modelPlayers","modelScores","renderPlayers","renderScores","_ref","showNotification","warn","renderGameState","renderTask","startTaskTimer","showScoreNotification","targetId","freezePlayer","duration","addChatMessage","playersList","document","getElementById","innerHTML","entries","forEach","_ref2","_ref3","playerCard","createElement","className","classList","add","appendChild","playerCountElement","textContent","startGameBtn","disabled","style","opacity","_this3","scoresList","sortedScores","sort","b","_ref4","index","_ref5","score","scoreItem","taskDescription","currentRound","description","isFake","color","textDecoration","renderTaskElements","gameUI","canvas","createClickElements","createTypeElements","createDrawElements","_this4","rect","getBoundingClientRect","colors","shapes","targetColor","random","targetShape","elementCount","_loop","element","shape","backgroundColor","width","height","left","top","addEventListener","completeTask","_this5","typeContainer","position","transform","textAlign","input","placeholder","targetWord","padding","fontSize","borderRadius","border","typedCount","targetCount","toLowerCase","setTimeout","focus","_this6","ctx","getContext","isDrawing","hasDrawn","strokeStyle","lineWidth","lineCap","stopDrawing","beginPath","moveTo","clientX","clientY","lineTo","stroke","_this7","timer","progressBar","querySelector","createProgressBar","totalTime","updateTimer","ceil","progress","progressContainer","parseInt","playSound","_this8","body","overlay","remove","message","undefined","notifications","notification","chatMessages","scrollTop","scrollHeight","chatContainer","display","soundId","audio","currentTime","play","register","ChaosGame","session","view","currentScreen","roomCode","initializeUI","loadLiveGames","_this9","joinGame","createRoom","startGame","leaveRoom","sendChatMessage","playAgain","goToMainMenu","_joinGame","_callee","result","_t","_this0","_context","trim","Session","join","apiKey","appId","password","switchScreen","updateRoomInfo","forceUpdatePlayerCount","playerCountInterval","error","_createRoom","_callee2","_context2","generateRoomCode","toUpperCase","gameMode","gameActive","startGameLoop","_this1","generateNewTask","_this10","taskTypes","targetObject","_objectSpread","Date","now","resetGame","timestamp","screenId","querySelectorAll","screen","liveGamesList","window","chaosGame"],"sourceRoot":""}